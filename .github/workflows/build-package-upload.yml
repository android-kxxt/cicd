# Build, Package and Upload the Release for a single target
name: Build, Package and Upload
run-name: ${{ inputs.manual && 'Manual' || 'Automated' }} OTA build for ${{ inputs.target }} (${{ inputs.unsigned && 'Test-Keys' || '' }}${{ (inputs.sign && inputs.unsigned) && 'Release-Keys' || '' }}${{ inputs.sign && 'Release-Keys' || '' }}${{ (!inputs.sign && !inputs.unsigned) && 'Build Check' || '' }})
env:
  CC_WRAPPER: "/usr/bin/ccache"
  USE_CCACHE: 1

concurrency:
  # Lock top-dir. Only one device runs this workflow at one source tree at the same time.
  group: ${{ inputs.top-dir }}-global
  cancel-in-progress: false

on:
  # Stupid GitHub Actions does not allow workflow dispatch and call to share inputs.
  workflow_dispatch:
    inputs:
      top-dir:
        required: true
        type: string
      target:
        required: true
        type: string
      sign:
        description: Create signed release
        required: false
        type: boolean
        default: false
      unsigned:
        description: Create unsigned release
        required: false
        type: boolean
        default: true
      backup:
        required: false
        type: boolean
        default: false
      ota-size-limit:
        required: false
        type: number
        default: 2147483648
      manual:
        description: 'An indicator for maunal invocation'
        type: boolean
        required: false
        default: true
  workflow_call:
    inputs:
      top-dir:
        required: true
        type: string
      target:
        required: true
        type: string
      sign:
        description: Create signed release
        required: false
        type: boolean
        default: false
      unsigned:
        description: Create unsigned release
        required: false
        type: boolean
        default: true
      backup:
        required: false
        type: boolean
        default: false
      ota-size-limit:
        required: false
        type: number
        default: 2147483648
jobs:
  info:
    name: Gather Source Information
    runs-on: self-hosted
    # We don't need to run this on build tests
    if: ${{ inputs.sign || inputs.unsigned }}
    outputs:
      manifests-branch: ${{ steps.repo-info.outputs.manifests-branch }}
      manifests-commit: ${{ steps.repo-info.outputs.manifests-commit }}
      local-branch: ${{ steps.repo-info.outputs.local-branch }}
      local-commit: ${{ steps.repo-info.outputs.local-commit }}
      tree-status: ${{ steps.tree-info.outputs.tree-status }}
    steps:
      - id: repo-info
        name: Get Info about Repo
        run: |
          cd -- "${{ inputs.top-dir }}"
          repo_remote_ref() {
            git -C "$1" for-each-ref --format='%(upstream:short)' "$(git -C "$1" symbolic-ref -q HEAD)"
          }
          repo_remote() {
            git -C "$1" config branch."$(git -C "$1" name-rev --name-only HEAD)".remote
          }
          repo_commit() {
            git -C "$1" rev-parse --short=12 HEAD
          }
          MANIFESTS_REMOTE_REF="$(repo_remote_ref .repo/manifests)"
          MANIFESTS_REMOTE="$(repo_remote .repo/manifests)"
          MANIFESTS_TRACKING_BRANCH="${MANIFESTS_REMOTE_REF#"$MANIFESTS_REMOTE/"}"
          LOCAL_REMOTE_REF="$(repo_remote_ref .repo/local_manifests)"
          LOCAL_REMOTE="$(repo_remote .repo/local_manifests)"
          LOCAL_TRACKING_BRANCH="${LOCAL_REMOTE_REF#"$LOCAL_REMOTE/"}"
          echo "manifests-branch=$MANIFESTS_TRACKING_BRANCH" >> "$GITHUB_OUTPUT"
          echo "manifests-commit=$(repo_commit .repo/manifests)" >> "$GITHUB_OUTPUT"
          echo "local-branch=$LOCAL_TRACKING_BRANCH" >> "$GITHUB_OUTPUT"
          echo "local-commit=$(repo_commit .repo/local_manifests)" >> "$GITHUB_OUTPUT"
      - id: tree-info
        name: Get Tree Status
        run: |
          cd -- "${{ inputs.top-dir }}"
          source build/envsetup.sh
          export ANDROID_SWT="$(realpath ./prebuilts/tools/linux-x86_64/swt/)"
          # Get status of each repo
          {
            echo 'tree-status<<TREE-STATUS-EOF'
            repo forall -c "$(realpath ./cicd/format-repo-commit.sh)" || true
            echo TREE-STATUS-EOF
          } >> "$GITHUB_OUTPUT"

  build:
    name: Build (${{ inputs.target }})
    runs-on: self-hosted
    concurrency:
      # Lock top-dir. Only one device builds at one source tree.
      group: ${{ inputs.top-dir }}
      cancel-in-progress: false
    outputs:
      target-files-package: ${{ steps.build.outputs.target-files-package }}
      ANDROID_PRODUCT_OUT: ${{ steps.build.outputs.ANDROID_PRODUCT_OUT }}
      TARGET_PRODUCT: ${{ steps.build.outputs.TARGET_PRODUCT }}
      LINEAGE_BUILD: ${{ steps.build.outputs.LINEAGE_BUILD }}
      PRODUCT_VERSION_MAJOR: ${{ steps.build.outputs.PRODUCT_VERSION_MAJOR }}
      PRODUCT_VERSION_MINOR: ${{ steps.build.outputs.PRODUCT_VERSION_MINOR }}
      # signed
      ORIG_BUILD_DATE_UTC_TIMESTAMP: ${{ steps.build.outputs.BUILD_DATE_UTC_TIMESTAMP }}
      ORIG_BUILD_DATE: ${{ steps.build.outputs.BUILD_DATE }}
      ORIG_BUILD_ID: ${{ steps.build.outputs.BUILD_ID }}
      ORIG_SECURITY_PATCH: ${{ steps.build.outputs.SECURITY_PATCH }}
      ORIG_BUILD_TYPE: ${{ steps.build.outputs.BUILD_TYPE }}
    steps:
      - name: Build
        id: build
        run: |
          cd -- "${{ inputs.top-dir }}"
          source build/envsetup.sh
          breakfast "${{ inputs.target }}"
          mka target-files-package otatools
          mkdir -p dist
          TARGET_FILES_PACKAGE="dist/$TARGET_PRODUCT-target_files-unsigned.zip"
          cp "$ANDROID_PRODUCT_OUT/obj/PACKAGING/target_files_intermediates/$TARGET_PRODUCT-target_files.zip" \
            "$TARGET_FILES_PACKAGE"
          echo "target-files-package=$TARGET_FILES_PACKAGE" >> "$GITHUB_OUTPUT"
          echo "ANDROID_PRODUCT_OUT=$ANDROID_PRODUCT_OUT" >> "$GITHUB_OUTPUT"
          echo "TARGET_PRODUCT=$TARGET_PRODUCT" >> "$GITHUB_OUTPUT"
          echo "LINEAGE_BUILD=$LINEAGE_BUILD" >> "$GITHUB_OUTPUT"
          PRODUCT_VERSION_MAJOR=$(grep '^PRODUCT_VERSION_MAJOR' vendor/lineage/config/version.mk | awk -F ' = ' '{print $2}')
          echo "PRODUCT_VERSION_MAJOR=$PRODUCT_VERSION_MAJOR" >> "$GITHUB_OUTPUT"
          PRODUCT_VERSION_MINOR=$(grep '^PRODUCT_VERSION_MINOR' vendor/lineage/config/version.mk | awk -F ' = ' '{print $2}')
          echo "PRODUCT_VERSION_MINOR=$PRODUCT_VERSION_MINOR" >> "$GITHUB_OUTPUT"

          # Only for signed build:

          SECURITY_PATCH="$(cat "$OUT/system/build.prop" | grep ro.build.version.security_patch=)"
          SECURITY_PATCH="${SECURITY_PATCH#*=}"
          echo "SECURITY_PATCH=$SECURITY_PATCH" >> "$GITHUB_OUTPUT"
          BUILD_DATE_UTC_TIMESTAMP="$(cat "$OUT/system/build.prop" | grep ro.build.date.utc=)"
          BUILD_DATE_UTC_TIMESTAMP="${BUILD_DATE_UTC_TIMESTAMP#*=}"
          echo "BUILD_DATE_UTC_TIMESTAMP=$BUILD_DATE_UTC_TIMESTAMP" >> "$GITHUB_OUTPUT"
          BUILD_DATE="$(date -u --date=@"$BUILD_DATE_UTC_TIMESTAMP" +%Y-%m-%d-%H-%M-%S)"
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_OUTPUT"
          BUILD_ID=$(cat "$OUT/system/build.prop" | grep ro.build.id=)
          BUILD_ID="${BUILD_ID#*=}"
          echo "BUILD_ID=$BUILD_ID" >> "$GITHUB_OUTPUT"
          BUILD_TYPE="$(cat "$OUT/system/build.prop" | grep ro.lineage.releasetype=)"
          BUILD_TYPE="${BUILD_TYPE#*=}"
          echo "BUILD_TYPE=$BUILD_TYPE" >> "$GITHUB_OUTPUT"

  package-ota:
    needs: build
    name: Package OTA (${{ inputs.target }}, Test-Keys)
    runs-on: self-hosted
    if: ${{ inputs.unsigned }}
    concurrency:
      # Lock top-dir. Only one device builds at one source tree.
      group: ${{ inputs.top-dir }}
      cancel-in-progress: false
    outputs:
      ota: ${{ steps.rename.outputs.ota }}
      BUILD_DATE_UTC_TIMESTAMP: ${{ steps.build.outputs.BUILD_DATE_UTC_TIMESTAMP }}
      BUILD_DATE: ${{ steps.build.outputs.BUILD_DATE }}
      BUILD_ID: ${{ steps.build.outputs.BUILD_ID }}
      SECURITY_PATCH: ${{ steps.build.outputs.SECURITY_PATCH }}
    steps:
      - name: Build OTA
        id: build
        run: |
          cd -- "${{ inputs.top-dir }}"
          source build/envsetup.sh
          breakfast "${{ inputs.target }}"
          mkdir -p dist
          mka dist DIST_DIR=dist
          # Credit: https://gitlab.com/cupid-development/automated-builds/-/blob/main/build.sh
          SECURITY_PATCH="$(cat "$OUT/system/build.prop" | grep ro.build.version.security_patch=)"
          SECURITY_PATCH="${SECURITY_PATCH#*=}"
          echo "SECURITY_PATCH=$SECURITY_PATCH" >> "$GITHUB_OUTPUT"
          BUILD_DATE_UTC_TIMESTAMP="$(cat "$OUT/system/build.prop" | grep ro.build.date.utc=)"
          BUILD_DATE_UTC_TIMESTAMP="${BUILD_DATE_UTC_TIMESTAMP#*=}"
          echo "BUILD_DATE_UTC_TIMESTAMP=$BUILD_DATE_UTC_TIMESTAMP" >> "$GITHUB_OUTPUT"
          BUILD_DATE="$(date -u --date=@"$BUILD_DATE_UTC_TIMESTAMP" +%Y-%m-%d-%H-%M-%S)"
          echo "BUILD_DATE=$BUILD_DATE" >> "$GITHUB_OUTPUT"
          BUILD_ID=$(cat "$OUT/system/build.prop" | grep ro.build.id=)
          BUILD_ID="${BUILD_ID#*=}"
          echo "BUILD_ID=$BUILD_ID" >> "$GITHUB_OUTPUT"
      - name: Rename
        id: rename
        run: |
          cd -- "${{ inputs.top-dir }}"
          FILENAME_WITHOUT_EXTENSION="lineage-${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}-${{ steps.build.outputs.BUILD_DATE }}-UNOFFICIAL-${{ needs.build.outputs.LINEAGE_BUILD }}-test"
          ota="dist/$FILENAME_WITHOUT_EXTENSION.zip"
          mv "dist/${{ needs.build.outputs.TARGET_PRODUCT }}-ota-$USER.zip" "$ota"
          echo "ota=$ota" >> "$GITHUB_OUTPUT"

  create-release:
    needs: [info, build, package-ota]
    name: Create Release (${{ inputs.target }}, Test-Keys)
    runs-on: self-hosted
    env:
      GH_TOKEN: ${{ github.token }}
      TREE_STATUS: ${{ needs.info.outputs.tree-status }}
    outputs:
      tag: ${{ steps.create-release.outputs.tag }}
    steps:
      - name: Create GitHub Release
        id: create-release
        run: |
          # Create the Release first.
          # Retry the upload in case of network failure.
          release_tag="${{ inputs.target }}-${{ needs.package-ota.outputs.BUILD_DATE }}-test"
          echo "tag=$release_tag" >> "$GITHUB_OUTPUT"
          version="${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}"
          gh -R "$GITHUB_REPOSITORY" release create "$release_tag" \
              -t "${{ needs.package-ota.outputs.BUILD_DATE }} Nightly $version OTA for ${{ inputs.target }}" \
              --notes "OS Version: ${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}
          Signed With: Test-Keys
          Security Patch: ${{ needs.package-ota.outputs.SECURITY_PATCH }}
          Build ID: ${{ needs.package-ota.outputs.BUILD_ID }}
          Build Timestamp: ${{ needs.package-ota.outputs.BUILD_DATE_UTC_TIMESTAMP }}
          Product: ${{ needs.build.outputs.TARGET_PRODUCT }}
          Manifests Branch: ${{ needs.info.outputs.manifests-branch }} @ ${{ needs.info.outputs.manifests-commit }}
          Local Branch: ${{ needs.info.outputs.local-branch }} @ ${{ needs.info.outputs.local-commit }}
          
          <details>
            <summary>Tree Status</summary>
            
            $TREE_STATUS

          </details>"

  upload-ota:
    needs: [build, package-ota, create-release]
    name: Upload OTA (${{ inputs.target }}, Test-Keys)
    runs-on: self-hosted
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Check OTA size
        id: check-size
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Check if the OTA size is over 2G, which is the size limit of GitHub Releases.
          OTA_SIZE="$(stat --printf="%s" "${{ needs.package-ota.outputs.ota }}")"
          if (( OTA_SIZE > ${{ inputs.ota-size-limit }} )); then
            echo "::warning title=OTA size too large::ota zip size is $OTA_SIZE, exceeding ${{ inputs.ota-size-limit }}."
            echo "recompress-requested=1" >> "$GITHUB_OUTPUT"
            echo "ota=${{ needs.package-ota.outputs.ota }}.zst" >> "$GITHUB_OUTPUT"
          else
            echo "ota=${{ needs.package-ota.outputs.ota }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Re-Compress OTA
        id: recompress
        if: ${{ steps.check-size.outputs.recompress-requested == '1' }}
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Re-compress OTA package using zstd if it is over 2G.
          # If it is still over 2G, give up uploading to GitHub Releases
          zstd -19 -T8 "${{ needs.package-ota.outputs.ota }}" -o "${{ steps.check-size.outputs.ota }}"
          COMPRESSED_OTA_SIZE="$(stat --printf="%s" "${{ needs.package-ota.outputs.ota }}")"
          if (( COMPRESSED_OTA_SIZE > ${{ inputs.ota-size-limit }} )); then
            echo "::warning title=OTA size still too large after compression::ota zip size is $COMPRESSED_OTA_SIZE, exceeding ${{ inputs.ota-size-limit }}."
            echo "should_upload=0" >> "$GITHUB_OUTPUT"
          else
            echo "should_upload=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload to Releases
        if: ${{ steps.recompress.outcome == 'skipped' || steps.recompress.outputs.should_upload == '1' }}
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Upload to GitHub Releases
          # Retry 5 times in case of network failure.
          for i in {1..5}; do
            gh -R "$GITHUB_REPOSITORY" release upload --clobber "${{ needs.create-release.outputs.tag }}" "${{ steps.check-size.outputs.ota }}" && break || sleep 5;
          done

      - name: Upload to Backup Server
        if: ${{ inputs.backup }}
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Upload to Backup Server for Archive
          false # TODO

  announce-ota:
    needs: [build, package-ota, create-release, upload-ota]
    name: Announce OTA (${{ inputs.target }}, Test-Keys)
    runs-on: self-hosted
    env:
      OTA_TIMESTAMP: ${{ needs.package-ota.outputs.BUILD_DATE_UTC_TIMESTAMP }}
      OTA_DEVICE: ${{ needs.build.outputs.LINEAGE_BUILD }}
      OTA_TYPE: ${{ needs.build.outputs.ORIG_BUILD_TYPE }}
      OTA_PATH: ${{ needs.package-ota.outputs.ota }}
      OTA_SIGNED: 0
      OTA_BASE_URL: https://github.com/${{ github.repository }}/releases/download/${{ needs.create-release.outputs.tag }}/
      OTA_OS_VERSION: ${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}
    steps:
      - name: Update
        id: update
        run: |
          # Update the json for this device.
          cd -- "${{ inputs.top-dir }}"
          ./cicd/announce-ota.js
      - name: Push
        run: |
          # Push the update to GitHub
          cd -- "${{ inputs.top-dir }}/ota"
          git reset
          git add "$OTA_DEVICE-${OTA_TYPE,,}-test-keys.json"
          git commit -m "Update OTA metadata for $OTA_DEVICE ($OTA_TYPE, Test)"
          git push github HEAD:main

  sign:
    if: ${{ inputs.sign }}
    needs: build
    name: Sign (${{ inputs.target }}, Release-Keys)
    runs-on: self-hosted
    outputs:
      signed-target-files-package: ${{ steps.sign.outputs.signed-target-files-package }}
    steps:
      - name: Write Passphrase to temp file
        id: passwd
        run: |
          TEMP_PW_FILE="$(mktemp)"
          echo "pw-file=$TEMP_PW_FILE" >> "$GITHUB_OUTPUT"
          cat << EOF > "$TEMP_PW_FILE"
          ${{ secrets.RELEASE_KEYS_PASSWORD }}
          EOF
      - name: Sign the Build
        id: sign
        run: |
          cd -- "${{ inputs.top-dir }}"
          SIGNED_PACKAGE="dist/${{ needs.build.outputs.TARGET_PRODUCT }}-target_files-signed.zip"
          export ANDROID_PW_FILE="${{ steps.passwd.outputs.pw-file }}"
          ./cicd/sign.sh "${{ needs.build.outputs.target-files-package }}" "$SIGNED_PACKAGE"
          echo "signed-target-files-package=$SIGNED_PACKAGE" >> "$GITHUB_OUTPUT"
      - name: Clean Up
        if: always()
        run: |
          rm -f -- "${{ steps.passwd.outputs.pw-file }}" || true

  package-signed-ota:
    needs: [build, sign]
    name: Package OTA (${{ inputs.target }}, Release-Keys)
    runs-on: self-hosted
    outputs:
      ota: ${{ steps.package.outputs.ota }}
    steps:
      - name: Write Passphrase to temp file
        id: passwd
        run: |
          TEMP_PW_FILE="$(mktemp)"
          echo "pw-file=$TEMP_PW_FILE" >> "$GITHUB_OUTPUT"
          cat << EOF > "$TEMP_PW_FILE"
          ${{ secrets.RELEASE_KEYS_PASSWORD }}
          EOF

      - name: Package OTA
        id: package
        run: |
          cd -- "${{ inputs.top-dir }}"
          source build/envsetup.sh
          export ANDROID_PW_FILE="${{ steps.passwd.outputs.pw-file }}"
          FILENAME_WITHOUT_EXTENSION="lineage-${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}-${{ needs.build.outputs.ORIG_BUILD_DATE }}-UNOFFICIAL-${{ needs.build.outputs.LINEAGE_BUILD }}"
          ota="dist/$FILENAME_WITHOUT_EXTENSION.zip"
          out/host/linux-x86/bin/ota_from_target_files -k ~/.android-certs/releasekey \
            --block \
            --backup=true \
            "${{ needs.sign.outputs.signed-target-files-package }}" \
            "$ota"
          echo "ota=$ota" >> "$GITHUB_OUTPUT"

      - name: Clean Up
        if: always()
        run: |
          rm -f -- "${{ steps.passwd.outputs.pw-file }}" || true
  
  create-signed-release:
    needs: [info, build, package-signed-ota]
    name: Create Release (${{ inputs.target }}, Release-Keys)
    runs-on: self-hosted
    env:
      GH_TOKEN: ${{ github.token }}
      TREE_STATUS: ${{ needs.info.outputs.tree-status }}
    outputs:
      tag: ${{ steps.create-release.outputs.tag }}
    steps:
      - name: Create GitHub Release
        id: create-release
        run: |
          # Create the Release first.
          # Retry the upload in case of network failure.
          release_tag="${{ inputs.target }}-${{ needs.build.outputs.ORIG_BUILD_DATE }}-release"
          echo "tag=$release_tag" >> "$GITHUB_OUTPUT"
          version="${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}"
          gh -R "$GITHUB_REPOSITORY" release create "$release_tag" \
              -t "${{ needs.build.outputs.ORIG_BUILD_DATE }} Nightly $version OTA for ${{ inputs.target }}" \
              --notes "OS Version: ${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}
          Signed With: Release-Keys
          Security Patch: ${{ needs.build.outputs.ORIG_SECURITY_PATCH }}
          Build ID: ${{ needs.build.outputs.ORIG_BUILD_ID }}
          Build Timestamp: ${{ needs.build.outputs.ORIG_BUILD_DATE_UTC_TIMESTAMP }}
          Product: ${{ needs.build.outputs.TARGET_PRODUCT }}
          Manifests Branch: ${{ needs.info.outputs.manifests-branch }} @ ${{ needs.info.outputs.manifests-commit }}
          Local Branch: ${{ needs.info.outputs.local-branch }} @ ${{ needs.info.outputs.local-commit }}
          
          <details>
            <summary>Tree Status</summary>
            
            $TREE_STATUS

          </details>"

  upload-signed-ota:
    needs: [build, package-signed-ota, create-signed-release]
    name: Upload OTA (${{ inputs.target }}, Release-Keys)
    runs-on: self-hosted
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Check OTA size
        id: check-size
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Check if the OTA size is over 2G, which is the size limit of GitHub Releases.
          OTA_SIZE="$(stat --printf="%s" "${{ needs.package-signed-ota.outputs.ota }}")"
          if (( OTA_SIZE > ${{ inputs.ota-size-limit }} )); then
            echo "::warning title=OTA size too large::ota zip size is $OTA_SIZE, exceeding ${{ inputs.ota-size-limit }}."
            echo "recompress-requested=1" >> "$GITHUB_OUTPUT"
            echo "ota=${{ needs.package-signed-ota.outputs.ota }}.zst" >> "$GITHUB_OUTPUT"
          else
            echo "ota=${{ needs.package-signed-ota.outputs.ota }}" >> "$GITHUB_OUTPUT"
          fi
      - name: Re-Compress OTA
        id: recompress
        if: ${{ steps.check-size.outputs.recompress-requested == '1' }}
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Re-compress OTA package using zstd if it is over 2G.
          # If it is still over 2G, give up uploading to GitHub Releases
          zstd -19 -T8 "${{ needs.package-signed-ota.outputs.ota }}" -o "${{ steps.check-size.outputs.ota }}"
          COMPRESSED_OTA_SIZE="$(stat --printf="%s" "${{ needs.package-signed-ota.outputs.ota }}")"
          if (( COMPRESSED_OTA_SIZE > ${{ inputs.ota-size-limit }} )); then
            echo "::warning title=OTA size still too large after compression::ota zip size is $COMPRESSED_OTA_SIZE, exceeding ${{ inputs.ota-size-limit }}."
            echo "should_upload=0" >> "$GITHUB_OUTPUT"
          else
            echo "should_upload=1" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload to Releases
        if: ${{ steps.recompress.outcome == 'skipped' || steps.recompress.outputs.should_upload == '1' }}
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Upload to GitHub Releases
          # Retry 5 times in case of network failure.
          for i in {1..5}; do
            gh -R "$GITHUB_REPOSITORY" release upload --clobber "${{ needs.create-signed-release.outputs.tag }}" "${{ steps.check-size.outputs.ota }}" && break || sleep 5;
          done

      - name: Upload to Backup Server
        if: ${{ inputs.backup }}
        run: |
          cd -- "${{ inputs.top-dir }}"
          # Upload to Backup Server for Archive
          false # TODO

  announce-signed-ota:
    needs: [build, package-signed-ota, create-signed-release, upload-signed-ota]
    name: Announce OTA (${{ inputs.target }}, Release-Keys)
    runs-on: self-hosted
    env:
      OTA_TIMESTAMP: ${{ needs.build.outputs.ORIG_BUILD_DATE_UTC_TIMESTAMP }}
      OTA_DEVICE: ${{ needs.build.outputs.LINEAGE_BUILD }}
      OTA_TYPE: ${{ needs.build.outputs.ORIG_BUILD_TYPE }}
      OTA_PATH: ${{ needs.package-signed-ota.outputs.ota }}
      OTA_SIGNED: 1
      OTA_BASE_URL: https://github.com/${{ github.repository }}/releases/download/${{ needs.create-signed-release.outputs.tag }}/
      OTA_OS_VERSION: ${{ needs.build.outputs.PRODUCT_VERSION_MAJOR }}.${{ needs.build.outputs.PRODUCT_VERSION_MINOR }}
    steps:
      - name: Update
        id: update
        run: |
          # Update the json for this device.
          cd -- "${{ inputs.top-dir }}"
          ./cicd/announce-ota.js
      - name: Push
        run: |
          # Push the update to GitHub
          cd -- "${{ inputs.top-dir }}/ota"
          git reset
          git add "$OTA_DEVICE-${OTA_TYPE,,}-release-keys.json"
          git commit -m "Update OTA metadata for $OTA_DEVICE ($OTA_TYPE, Release)"
          git push github HEAD:main
